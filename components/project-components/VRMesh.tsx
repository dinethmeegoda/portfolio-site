'use client';
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { HiArrowDown, HiArrowRight } from 'react-icons/hi';

const VRMesh = () => {
  return (
    <section id="home">
      {/*Div that contains picture and text*/}
      <div className="flex flex-col items-center justify-center text-center lg:space-x-4">
        {/*Name Title Text*/}
        <div className="mx-5 px-10 xl:mt-2">
          <h1 className="mb-10 text-4xl font-semibold xl:text-6xl">
            {' '}
            VR Mesh Cutting Tool
          </h1>
          {/*Picture*/}
          <div className="my-16 xl:flex xl:flex-row xl:space-x-12">
            <div className="xl:w-3/5">
              <div className="flex aspect-video flex-col">
                <iframe
                  className=" h-full w-full rounded-lg"
                  src="https://www.youtube.com/embed/7zhOj0iSXVE?si=kTtDrxwUWDojmWNQ"
                  width="100%"
                  title="YouTube video player"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowFullScreen
                ></iframe>
                <p className="font-style: my-4 text-xl italic">
                  Brief Video Overview of the project
                </p>
              </div>
            </div>
            <div className="xl:w-2/5">
              <h1 className="mb-4 text-3xl font-semibold text-blue-800 dark:text-fuchsia-400 xl:mt-0 xl:text-left">
                The Problem
              </h1>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                This Tool was made during my research internship at Penn
                Medicine while working on VR Surgical Training Didactics that
                would be used wirelessly on the Oculus Quest 2 developed on the
                Unity Engine. This was specifically made for a module that would
                train surgeons on completing a &#34;Surgical Airway&#34;
                procedure, in which surgeons would make a small incision into
                the patient&apos;s neck.
              </p>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                This would use the Quest&apos;s hand tracking feature to
                increase the immersion and practice value of the simulation.
                However, to make this simulation accurate, we needed to use a
                real-time mesh cutting feature that would run at least 75 FPS on
                the Quest to deter motion sickness.
              </p>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                However, there was no accessible algorithm that would be able to
                modify and cut complex meshes in realtime while maintaining the
                high framerate needed for VR.
              </p>
            </div>
          </div>
          <div className="mitems-center flex flex-col xl:flex-row">
            <div className="xl:w-3/5">
              <h1 className="mb-4 text-3xl font-semibold text-blue-800 dark:text-fuchsia-400 xl:mt-0 xl:text-left">
                Breakthrough Ideas
              </h1>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                To solve this complex issue, I began searching through the
                internet for effects that would help me figure out this effect.
                I started by specifically looking through effects that created a
                hole or cut in a surface that wouldn&apos;t have to rely on
                changing too much of the underlying geometry.
              </p>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                Luckily, I stumbed on{' '}
                <span className="font-bold text-blue-800 underline dark:text-fuchsia-500">
                  <a href="https://www.youtube.com/watch?v=qiAiVa0HtyE">
                    this video
                  </a>
                </span>{' '}
                by Gabriel Aguiar that showed how to generate cracks on the
                ground using a &apos;crack mesh&apos; that would be rendered on
                the surface on the ground and used a stencil buffer and
                passthrough rendering in order to create the effect that this
                crack was &apos;cutting into&apos; the ground.
              </p>
              <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
                I decided to extrapolate this idea to my own problem by creating
                my passthrough rendering materials that would be able to create
                the illusion of cutting through the mesh. However, because this
                cut had to be generated by the user, it could not be static and
                had to be procedurally generated using the user&apos;s hand
                tracking.
              </p>
            </div>
            <div className="mx-auto xl:w-2/5">
              <Image
                className=""
                src="/projects-images/vr-mesh/MeshCutDemo.gif"
                alt=""
                width={500}
                height={500}
              />
              <p className="font-style: my-4 text-left text-xl italic">
                Early Prototype of the tool that instantiates cut meshes
              </p>
            </div>
          </div>
          <div>
            <h1 className="mb-4 text-3xl font-semibold text-blue-800 dark:text-fuchsia-400 xl:mt-0 xl:text-left">
              Implementation
            </h1>
            <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
              To apply this concept to my own purpose, I defined certain objects
              as cuttable and used the point of the scalpel object as a marker
              to test when a cuttable mesh was intersected. The intersection
              location in the mesh&apos;s local space was determined by the
              mesh&apos;s own physics collider, allowing intersections to be
              checked from a simple box or cylinder for more performant
              calculations to a complete mesh collider which would record more
              accurate intersections.
            </p>
            <p className="mb-10 text-2xl leading-relaxed xl:pr-12 xl:text-left">
              However, having these cuts occur with every check of the
              intersection would have been too inefficient so I needed to come
              up with a way to only create a single valid intersection point in
              each section of space. To do this, I implemented a simple 3D
              Hashing algorithm that would break up each point into a single
              section of space so that each section would only have one
              intersection point.
            </p>
            <Image
              className="mx-auto w-2/3"
              src="/projects-images/vr-mesh/hashSketch.jpg"
              alt=""
              width={1560}
              height={758}
            />
            <p className="mx-auto my-4 text-left text-xl italic ">
              Whiteboard prototype of the 3D Hashing Algorithm
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default VRMesh;
